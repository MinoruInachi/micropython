# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Damien P. George, Paul Sokolovsky, and
# contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-26 09:54+0900\n"
"PO-Revision-Date: 2019-01-26 10:03+0900\n"
"Last-Translator: Minoru Inachi\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../../genrst/builtin_types.rst:4
msgid "Builtin Types"
msgstr "組込み型"

#: ../../../genrst/builtin_types.rst:5 ../../../genrst/core_language.rst:5
#: ../../../genrst/modules.rst:5 ../../../genrst/syntax.rst:5
msgid "Generated Sat 26 Jan 2019 00:53:26 UTC"
msgstr ""

#: ../../../genrst/builtin_types.rst:8
msgid "Exception"
msgstr "例外"

#: ../../../genrst/builtin_types.rst:13
msgid "Exception chaining not implemented"
msgstr "例外チェーンは実装されていない"

#: ../../../genrst/builtin_types.rst:15 ../../../genrst/builtin_types.rst:47
#: ../../../genrst/builtin_types.rst:68 ../../../genrst/builtin_types.rst:102
#: ../../../genrst/builtin_types.rst:126 ../../../genrst/builtin_types.rst:152
#: ../../../genrst/builtin_types.rst:173 ../../../genrst/builtin_types.rst:194
#: ../../../genrst/builtin_types.rst:214 ../../../genrst/builtin_types.rst:236
#: ../../../genrst/builtin_types.rst:262 ../../../genrst/builtin_types.rst:285
#: ../../../genrst/builtin_types.rst:306 ../../../genrst/builtin_types.rst:328
#: ../../../genrst/builtin_types.rst:345 ../../../genrst/builtin_types.rst:364
#: ../../../genrst/builtin_types.rst:385 ../../../genrst/builtin_types.rst:402
#: ../../../genrst/builtin_types.rst:419 ../../../genrst/builtin_types.rst:440
#: ../../../genrst/builtin_types.rst:460 ../../../genrst/core_language.rst:15
#: ../../../genrst/core_language.rst:45 ../../../genrst/core_language.rst:74
#: ../../../genrst/core_language.rst:114 ../../../genrst/core_language.rst:149
#: ../../../genrst/core_language.rst:173 ../../../genrst/core_language.rst:197
#: ../../../genrst/core_language.rst:240 ../../../genrst/core_language.rst:263
#: ../../../genrst/core_language.rst:295 ../../../genrst/core_language.rst:318
#: ../../../genrst/core_language.rst:352 ../../../genrst/modules.rst:15
#: ../../../genrst/modules.rst:33 ../../../genrst/modules.rst:53
#: ../../../genrst/modules.rst:84 ../../../genrst/modules.rst:106
#: ../../../genrst/modules.rst:128 ../../../genrst/modules.rst:155
#: ../../../genrst/modules.rst:177 ../../../genrst/modules.rst:204
#: ../../../genrst/syntax.rst:15 ../../../genrst/syntax.rst:48
msgid "Sample code::"
msgstr "サンプルコード::"

#: ../../../genrst/builtin_types.rst:17
msgid ""
"try:\n"
"    raise TypeError\n"
"except TypeError:\n"
"    raise ValueError"
msgstr ""

#: ../../../genrst/builtin_types.rst:23 ../../../genrst/builtin_types.rst:54
#: ../../../genrst/builtin_types.rst:78 ../../../genrst/builtin_types.rst:111
#: ../../../genrst/builtin_types.rst:133 ../../../genrst/builtin_types.rst:157
#: ../../../genrst/builtin_types.rst:178 ../../../genrst/builtin_types.rst:199
#: ../../../genrst/builtin_types.rst:219 ../../../genrst/builtin_types.rst:245
#: ../../../genrst/builtin_types.rst:269 ../../../genrst/builtin_types.rst:292
#: ../../../genrst/builtin_types.rst:313 ../../../genrst/builtin_types.rst:333
#: ../../../genrst/builtin_types.rst:350 ../../../genrst/builtin_types.rst:369
#: ../../../genrst/builtin_types.rst:390 ../../../genrst/builtin_types.rst:407
#: ../../../genrst/builtin_types.rst:428 ../../../genrst/builtin_types.rst:445
#: ../../../genrst/builtin_types.rst:465 ../../../genrst/core_language.rst:29
#: ../../../genrst/core_language.rst:58 ../../../genrst/core_language.rst:99
#: ../../../genrst/core_language.rst:130 ../../../genrst/core_language.rst:157
#: ../../../genrst/core_language.rst:182 ../../../genrst/core_language.rst:219
#: ../../../genrst/core_language.rst:249 ../../../genrst/core_language.rst:275
#: ../../../genrst/core_language.rst:302 ../../../genrst/core_language.rst:333
#: ../../../genrst/core_language.rst:364 ../../../genrst/modules.rst:21
#: ../../../genrst/modules.rst:41 ../../../genrst/modules.rst:60
#: ../../../genrst/modules.rst:89 ../../../genrst/modules.rst:113
#: ../../../genrst/modules.rst:140 ../../../genrst/modules.rst:165
#: ../../../genrst/modules.rst:187 ../../../genrst/modules.rst:211
#: ../../../genrst/syntax.rst:31 ../../../genrst/syntax.rst:53
msgid "CPy output:"
msgstr "CPy 出力:"

#: ../../../genrst/builtin_types.rst:23 ../../../genrst/builtin_types.rst:54
#: ../../../genrst/builtin_types.rst:78 ../../../genrst/builtin_types.rst:111
#: ../../../genrst/builtin_types.rst:133 ../../../genrst/builtin_types.rst:157
#: ../../../genrst/builtin_types.rst:178 ../../../genrst/builtin_types.rst:199
#: ../../../genrst/builtin_types.rst:219 ../../../genrst/builtin_types.rst:245
#: ../../../genrst/builtin_types.rst:269 ../../../genrst/builtin_types.rst:292
#: ../../../genrst/builtin_types.rst:313 ../../../genrst/builtin_types.rst:333
#: ../../../genrst/builtin_types.rst:350 ../../../genrst/builtin_types.rst:369
#: ../../../genrst/builtin_types.rst:390 ../../../genrst/builtin_types.rst:407
#: ../../../genrst/builtin_types.rst:428 ../../../genrst/builtin_types.rst:445
#: ../../../genrst/builtin_types.rst:465 ../../../genrst/core_language.rst:29
#: ../../../genrst/core_language.rst:58 ../../../genrst/core_language.rst:99
#: ../../../genrst/core_language.rst:130 ../../../genrst/core_language.rst:157
#: ../../../genrst/core_language.rst:182 ../../../genrst/core_language.rst:219
#: ../../../genrst/core_language.rst:249 ../../../genrst/core_language.rst:275
#: ../../../genrst/core_language.rst:302 ../../../genrst/core_language.rst:333
#: ../../../genrst/core_language.rst:364 ../../../genrst/modules.rst:21
#: ../../../genrst/modules.rst:41 ../../../genrst/modules.rst:60
#: ../../../genrst/modules.rst:89 ../../../genrst/modules.rst:113
#: ../../../genrst/modules.rst:140 ../../../genrst/modules.rst:165
#: ../../../genrst/modules.rst:187 ../../../genrst/modules.rst:211
#: ../../../genrst/syntax.rst:31 ../../../genrst/syntax.rst:53
msgid "uPy output:"
msgstr "uPy 出力:"

#: ../../../genrst/builtin_types.rst:28
msgid ""
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 8, in <module>\n"
"TypeError\n"
"\n"
"During handling of the above exception, another exception occurred:\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 10, in <module>\n"
"ValueError"
msgstr ""

#: ../../../genrst/builtin_types.rst:28 ../../../genrst/builtin_types.rst:59
#: ../../../genrst/builtin_types.rst:83 ../../../genrst/builtin_types.rst:116
#: ../../../genrst/builtin_types.rst:138 ../../../genrst/builtin_types.rst:162
#: ../../../genrst/builtin_types.rst:183 ../../../genrst/builtin_types.rst:204
#: ../../../genrst/builtin_types.rst:224 ../../../genrst/builtin_types.rst:250
#: ../../../genrst/builtin_types.rst:274 ../../../genrst/builtin_types.rst:297
#: ../../../genrst/builtin_types.rst:318 ../../../genrst/builtin_types.rst:338
#: ../../../genrst/builtin_types.rst:355 ../../../genrst/builtin_types.rst:374
#: ../../../genrst/builtin_types.rst:395 ../../../genrst/builtin_types.rst:412
#: ../../../genrst/builtin_types.rst:433 ../../../genrst/builtin_types.rst:450
#: ../../../genrst/builtin_types.rst:470 ../../../genrst/core_language.rst:34
#: ../../../genrst/core_language.rst:63 ../../../genrst/core_language.rst:104
#: ../../../genrst/core_language.rst:135 ../../../genrst/core_language.rst:162
#: ../../../genrst/core_language.rst:187 ../../../genrst/core_language.rst:224
#: ../../../genrst/core_language.rst:254 ../../../genrst/core_language.rst:280
#: ../../../genrst/core_language.rst:307 ../../../genrst/core_language.rst:338
#: ../../../genrst/core_language.rst:369 ../../../genrst/modules.rst:26
#: ../../../genrst/modules.rst:46 ../../../genrst/modules.rst:65
#: ../../../genrst/modules.rst:94 ../../../genrst/modules.rst:118
#: ../../../genrst/modules.rst:145 ../../../genrst/modules.rst:170
#: ../../../genrst/modules.rst:192 ../../../genrst/modules.rst:216
#: ../../../genrst/syntax.rst:36 ../../../genrst/syntax.rst:58
msgid "/bin/sh: ../ports/unix/micropython: No such file or directory"
msgstr ""

#: ../../../genrst/builtin_types.rst:41
msgid "User-defined attributes for builtin exceptions are not supported"
msgstr "組込み例外のユーザ定義属性はサポートされない"

#: ../../../genrst/builtin_types.rst:43 ../../../genrst/builtin_types.rst:190
#: ../../../genrst/core_language.rst:169
msgid "**Cause:** MicroPython is highly optimized for memory usage."
msgstr "**原因:** MicroPython はメモリ使用量について高度に最適化しています。"

#: ../../../genrst/builtin_types.rst:45
msgid "**Workaround:** Use user-defined exception subclasses."
msgstr "**回避策:** ユーザ定義の例外サブクラスを使ってください。"

#: ../../../genrst/builtin_types.rst:49
msgid ""
"e = Exception()\n"
"e.x = 0\n"
"print(e.x)"
msgstr ""

#: ../../../genrst/builtin_types.rst:59 ../../../genrst/core_language.rst:187
msgid "0"
msgstr ""

#: ../../../genrst/builtin_types.rst:64
msgid "Exception in while loop condition may have unexpected line number"
msgstr "while ループ条件での例外は予期しない行番号になる"

#: ../../../genrst/builtin_types.rst:66
msgid ""
"**Cause:** Condition checks are optimized to happen at the end of loop "
"body, and that line number is reported."
msgstr ""
"**原因:** 条件チェックはループ本体の最後で実行されるように最適化されているので、"
"その行番号が報告されます。"

#: ../../../genrst/builtin_types.rst:70
msgid ""
"l = [\"-foo\", \"-bar\"]\n"
"\n"
"i = 0\n"
"while l[i][0] == \"-\":\n"
"    print(\"iter\")\n"
"    i += 1"
msgstr ""

#: ../../../genrst/builtin_types.rst:83
msgid ""
"iter\n"
"iter\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 10, in <module>\n"
"IndexError: list index out of range"
msgstr ""

#: ../../../genrst/builtin_types.rst:92
msgid "Exception.__init__ method does not exist."
msgstr "Exception.__init__ メソッドは存在しない"

#: ../../../genrst/builtin_types.rst:94
msgid ""
"**Cause:** Subclassing native classes is not fully supported in "
"MicroPython."
msgstr ""
"**原因:** ネイティブクラスのサブクラス化は、Micropython で完全にはサポート"
"されていません。"

#: ../../../genrst/builtin_types.rst:96
msgid "**Workaround:** Call using ``super()`` instead::"
msgstr "**回避策:** 代わりに、次のように  ``super()`` を使って呼出してください。"

#: ../../../genrst/builtin_types.rst:98
msgid ""
"class A(Exception):\n"
"    def __init__(self):\n"
"        super().__init__()"
msgstr ""

#: ../../../genrst/builtin_types.rst:104
msgid ""
"class A(Exception):\n"
"    def __init__(self):\n"
"        Exception.__init__(self)\n"
"\n"
"a = A()"
msgstr ""

#: ../../../genrst/builtin_types.rst:119
msgid "bytearray"
msgstr ""

#: ../../../genrst/builtin_types.rst:124
msgid "Array slice assignment with unsupported RHS"
msgstr "配列スライスへの代入はサポートされない"

#: ../../../genrst/builtin_types.rst:128
msgid ""
"b = bytearray(4)\n"
"b[0:1] = [1, 2]\n"
"print(b)"
msgstr ""

#: ../../../genrst/builtin_types.rst:138
msgid "bytearray(b'\\x01\\x02\\x00\\x00\\x00')"
msgstr ""

#: ../../../genrst/builtin_types.rst:141
msgid "bytes"
msgstr ""

#: ../../../genrst/builtin_types.rst:146
msgid "bytes objects support .format() method"
msgstr "bytes オブジェクトが .format() メソッドをサポート"

#: ../../../genrst/builtin_types.rst:148
#, python-format
msgid ""
"**Cause:** MicroPython strives to be a more regular implementation, so if"
" both `str` and `bytes` support ``__mod__()`` (the % operator), it makes "
"sense to support ``format()`` for both too. Support for ``__mod__`` can "
"also be compiled out, which leaves only ``format()`` for bytes "
"formatting."
msgstr ""
"**原因:** MicroPython はより一般的な実装であるため、 `str` と `bytes` の両方が "
"``__mod__()`` (% 演算子) をサポートすると、 ``format()`` も両方でサポートする"
"ことになります。 ``__mod__()`` のサポートが続く限り、bytes のフォーマットを行う "
"``format()`` も残ります。"

#: ../../../genrst/builtin_types.rst:150
msgid ""
"**Workaround:** If you are interested in CPython compatibility, don't use"
" ``.format()`` on bytes objects."
msgstr ""
"**回避策:** CPython との互換性にこだわるなら bytes オブジェクトに対して "
"``.format()`` を使わないでください。"

#: ../../../genrst/builtin_types.rst:154
msgid "print(b'{}'.format(1))"
msgstr ""

#: ../../../genrst/builtin_types.rst:162
msgid ""
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 7, in <module>\n"
"AttributeError: 'bytes' object has no attribute 'format'"
msgstr ""

#: ../../../genrst/builtin_types.rst:169
msgid "bytes() with keywords not implemented"
msgstr "bytes() のキーワード引数は未実装"

#: ../../../genrst/builtin_types.rst:171
msgid ""
"**Workaround:** Pass the encoding as a positional paramter, e.g. "
"``print(bytes('abc', 'utf-8'))``"
msgstr ""
"**回避策:** エンコーディングは位置パラメータで渡してください。たとえば "
"``print(bytes('abc', 'utf-8'))`` のようにします。"

#: ../../../genrst/builtin_types.rst:175
msgid "print(bytes('abc', encoding='utf8'))"
msgstr ""

#: ../../../genrst/builtin_types.rst:183
msgid "b'abc'"
msgstr ""

#: ../../../genrst/builtin_types.rst:188
msgid "Bytes subscription with step != 1 not implemented"
msgstr "スライスのステップが1以外は未実装"

#: ../../../genrst/builtin_types.rst:192
msgid "**Workaround:** Use explicit loop for this very rare operation."
msgstr "**回避策:** このまれな操作には明示的なループを使ってください。"

#: ../../../genrst/builtin_types.rst:196
msgid "print(b'123'[0:3:2])"
msgstr ""

#: ../../../genrst/builtin_types.rst:204
msgid "b'13'"
msgstr ""

#: ../../../genrst/builtin_types.rst:207
msgid "float"
msgstr ""

#: ../../../genrst/builtin_types.rst:212
msgid "uPy and CPython outputs formats may differ"
msgstr "uPy と CPython の出力フォーマットが異なることがある"

#: ../../../genrst/builtin_types.rst:216
#, python-format
msgid "print('%.1g' % -9.9)"
msgstr ""

#: ../../../genrst/builtin_types.rst:224
msgid "-1e+01"
msgstr ""

#: ../../../genrst/builtin_types.rst:227
msgid "int"
msgstr ""

#: ../../../genrst/builtin_types.rst:232
msgid "No int conversion for int-derived types available"
msgstr "int の派生型に対する int 変換は使えない"

#: ../../../genrst/builtin_types.rst:234
msgid ""
"**Workaround:** Avoid subclassing builtin types unless really needed. "
"Prefer https://en.wikipedia.org/wiki/Composition_over_inheritance ."
msgstr ""
"**回避策:** 本当に必要でない限り、組み込み型のサブクラス化は避けてください。 "
"https://en.wikipedia.org/wiki/Composition_over_inheritance を推奨します。"

#: ../../../genrst/builtin_types.rst:238
msgid ""
"class A(int):\n"
"    __add__ = lambda self, other: A(int(self) + other)\n"
"\n"
"a = A(42)\n"
"print(a+a)"
msgstr ""

#: ../../../genrst/builtin_types.rst:250
msgid "84"
msgstr ""

#: ../../../genrst/builtin_types.rst:253
msgid "list"
msgstr "リスト"

#: ../../../genrst/builtin_types.rst:258
msgid "List delete with step != 1 not implemented"
msgstr "ステップが 1 以外のリスト要素の削除は未実装"

#: ../../../genrst/builtin_types.rst:260 ../../../genrst/builtin_types.rst:304
msgid "**Workaround:** Use explicit loop for this rare operation."
msgstr "**回避策:** このまれな操作には明示的なループを使ってください。"

#: ../../../genrst/builtin_types.rst:264
msgid ""
"l = [1, 2, 3, 4]\n"
"del l[0:4:2]\n"
"print(l)"
msgstr ""

#: ../../../genrst/builtin_types.rst:274
msgid "[2, 4]"
msgstr ""

#: ../../../genrst/builtin_types.rst:279
msgid "List slice-store with non-iterable on RHS is not implemented"
msgstr "リストのスライスへのイテレーティブの代入は未実装"

#: ../../../genrst/builtin_types.rst:281
msgid "**Cause:** RHS is restricted to be a tuple or list"
msgstr "**原因:** 右辺はタプルかリストに制限されています。"

#: ../../../genrst/builtin_types.rst:283
msgid ""
"**Workaround:** Use ``list(<iter>)`` on RHS to convert the iterable to a "
"list"
msgstr ""
"**回避策**: イテレータブルをリストに変換するよう、右辺で ``list(<iter>)`` を使ってください。"

#: ../../../genrst/builtin_types.rst:287
msgid ""
"l = [10, 20]\n"
"l[0:1] = range(4)\n"
"print(l)"
msgstr ""

#: ../../../genrst/builtin_types.rst:297
msgid "[0, 1, 2, 3, 20]"
msgstr ""

#: ../../../genrst/builtin_types.rst:302
msgid "List store with step != 1 not implemented"
msgstr "ステップ 1 以外のリストスライスへの代入は未実装"

#: ../../../genrst/builtin_types.rst:308
msgid ""
"l = [1, 2, 3, 4]\n"
"l[0:4:2] = [5, 6]\n"
"print(l)"
msgstr ""

#: ../../../genrst/builtin_types.rst:318
msgid "[5, 2, 6, 4]"
msgstr ""

#: ../../../genrst/builtin_types.rst:321
msgid "str"
msgstr ""

#: ../../../genrst/builtin_types.rst:326
msgid "Start/end indices such as str.endswith(s, start) not implemented"
msgstr "str.endswith(s, start) のような開始/終了インデックスは未実装"

#: ../../../genrst/builtin_types.rst:330
msgid "print('abc'.endswith('c', 1))"
msgstr ""

#: ../../../genrst/builtin_types.rst:338 ../../../genrst/builtin_types.rst:433
msgid "True"
msgstr ""

#: ../../../genrst/builtin_types.rst:343
msgid "Attributes/subscr not implemented"
msgstr "属性置換は未実装"

#: ../../../genrst/builtin_types.rst:347
msgid "print('{a[0]}'.format(a=[1, 2]))"
msgstr ""

#: ../../../genrst/builtin_types.rst:355
msgid "1"
msgstr ""

#: ../../../genrst/builtin_types.rst:360
msgid "str(...) with keywords not implemented"
msgstr "str(...) のキーワード引数は未実装"

#: ../../../genrst/builtin_types.rst:362
msgid ""
"**Workaround:** Input the encoding format directly. eg "
"``print(bytes('abc', 'utf-8'))``"
msgstr ""
"**回避策:** エンコーディングは位置パラメータで指定してください。たとえば "
"``print(str(b'abc', 'utf-8'))`` のようにします。"

#: ../../../genrst/builtin_types.rst:366
msgid "print(str(b'abc', encoding='utf8'))"
msgstr ""

#: ../../../genrst/builtin_types.rst:374 ../../../genrst/builtin_types.rst:395
msgid "abc"
msgstr ""

#: ../../../genrst/builtin_types.rst:379
msgid "str.ljust() and str.rjust() not implemented"
msgstr "str.ljust() and str.rjust() は未実装"

#: ../../../genrst/builtin_types.rst:381
msgid ""
"**Cause:** MicroPython is highly optimized for memory usage. Easy "
"workarounds available."
msgstr "**原因:** MicroPython はメモリ使用量について高度に最適化しています。"
"これは簡単に回避できます。"

#: ../../../genrst/builtin_types.rst:383
#, python-format
msgid ""
"**Workaround:** Instead of ``s.ljust(10)`` use ``\"%-10s\" % s``, instead"
" of ``s.rjust(10)`` use ``\"% 10s\" % s``. Alternatively, "
"``\"{:<10}\".format(s)`` or ``\"{:>10}\".format(s)``."
msgstr ""
"**回避策:** ``s.ljust(10)`` の代わりに ``\"%-10s\" % s`` 、"
"``s.rjust(10)`` の代わりに ``\"% 10s\" % s`` を使ってください。"
"あるいは ``\"{:<10}\".format(s)`` や ``\"{:>10}\".format(s)`` "
"を使ってください。"

#: ../../../genrst/builtin_types.rst:387
msgid "print('abc'.ljust(10))"
msgstr ""

#: ../../../genrst/builtin_types.rst:400
msgid ""
"None as first argument for rsplit such as str.rsplit(None, n) not "
"implemented"
msgstr ""
"str.rsplit(None, n) のように rsplit の第１引数を None にするのは"
"未実装"

#: ../../../genrst/builtin_types.rst:404
msgid "print('a a a'.rsplit(None, 1))"
msgstr ""

#: ../../../genrst/builtin_types.rst:412
msgid "['a a', 'a']"
msgstr ""

#: ../../../genrst/builtin_types.rst:417
msgid ""
"Instance of a subclass of str cannot be compared for equality with an "
"instance of a str"
msgstr "str のサブクラスのインスタンスと str のインスタンスとの等価性は比較できない"

#: ../../../genrst/builtin_types.rst:421
msgid ""
"class S(str):\n"
"    pass\n"
"\n"
"s = S('hello')\n"
"print(s == 'hello')"
msgstr ""

#: ../../../genrst/builtin_types.rst:438 ../../../genrst/modules.rst:51
msgid "Subscript with step != 1 is not yet implemented"
msgstr "ステップが 1 でないスライスは未実装"

#: ../../../genrst/builtin_types.rst:442
msgid "print('abcdefghi'[0:9:2])"
msgstr ""

#: ../../../genrst/builtin_types.rst:450
msgid "acegi"
msgstr ""

#: ../../../genrst/builtin_types.rst:453
msgid "tuple"
msgstr "タプル"

#: ../../../genrst/builtin_types.rst:458
msgid "Tuple load with step != 1 not implemented"
msgstr "ステップが 1 でないタプルのスライスは未実装"

#: ../../../genrst/builtin_types.rst:462
msgid "print((1, 2, 3, 4)[0:4:2])"
msgstr ""

#: ../../../genrst/builtin_types.rst:470
msgid "(1, 3)"
msgstr ""

#: ../../../genrst/core_language.rst:4
msgid "Core Language"
msgstr "コア言語"

#: ../../../genrst/core_language.rst:8
msgid "Classes"
msgstr "クラス"

#: ../../../genrst/core_language.rst:13
msgid "Special method __del__ not implemented for user-defined classes"
msgstr "特殊メソッド __del__ はユーザ定義クラス用には未実装"

#: ../../../genrst/core_language.rst:17
msgid ""
"import gc\n"
"\n"
"class Foo():\n"
"    def __del__(self):\n"
"        print('__del__')\n"
"\n"
"f = Foo()\n"
"del f\n"
"\n"
"gc.collect()"
msgstr ""

#: ../../../genrst/core_language.rst:34
msgid "__del__"
msgstr ""

#: ../../../genrst/core_language.rst:39
msgid "Method Resolution Order (MRO) is not compliant with CPython"
msgstr "メソッド解決順序(MRO: Method Resolution Order)は Cpython に未準拠"

#: ../../../genrst/core_language.rst:41
msgid "**Cause:** Depth first non-exhaustive method resolution order"
msgstr "**原因:** 深さ優先の非網羅的なメソッド解決順序"

#: ../../../genrst/core_language.rst:43
msgid ""
"**Workaround:** Avoid complex class hierarchies with multiple inheritance"
" and complex method overrides. Keep in mind that many languages don't "
"support multiple inheritance at all."
msgstr ""
"**回避策:** 多重継承と複雑なメソッドのオーバーライドがある複雑なクラス階層を"
"避けてください。多くの言語が多重継承をまったくサポートしていないことに注意して"
"ください。"

#: ../../../genrst/core_language.rst:47
msgid ""
"class Foo:\n"
"    def __str__(self):\n"
"        return \"Foo\"\n"
"\n"
"class C(tuple, Foo):\n"
"    pass\n"
"\n"
"t = C((1, 2, 3))\n"
"print(t)"
msgstr ""

#: ../../../genrst/core_language.rst:63
msgid "Foo"
msgstr ""

#: ../../../genrst/core_language.rst:68
msgid "When inheriting from multiple classes super() only calls one class"
msgstr "多重継承では super() は１つのクラスを呼び出すだけ"

#: ../../../genrst/core_language.rst:70
msgid "**Cause:** See :ref:`cpydiff_core_class_mro`"
msgstr "**原因:** :ref:`cpydiff_core_class_mro` を参照"

#: ../../../genrst/core_language.rst:72
msgid "**Workaround:** See :ref:`cpydiff_core_class_mro`"
msgstr "**回避策:** :ref:`cpydiff_core_class_mro` を参照"

#: ../../../genrst/core_language.rst:76
msgid ""
"class A:\n"
"    def __init__(self):\n"
"        print(\"A.__init__\")\n"
"\n"
"class B(A):\n"
"    def __init__(self):\n"
"        print(\"B.__init__\")\n"
"        super().__init__()\n"
"\n"
"class C(A):\n"
"    def __init__(self):\n"
"        print(\"C.__init__\")\n"
"        super().__init__()\n"
"\n"
"\n"
"class D(B,C):\n"
"    def __init__(self):\n"
"        print(\"D.__init__\")\n"
"        super().__init__()\n"
"\n"
"D()"
msgstr ""

#: ../../../genrst/core_language.rst:104
msgid ""
"D.__init__\n"
"B.__init__\n"
"C.__init__\n"
"A.__init__"
msgstr ""

#: ../../../genrst/core_language.rst:112
msgid ""
"Calling super() getter property in subclass will return a property "
"object, not the value"
msgstr "サブクラスでの super() ゲッター(getter)プロパティ呼出しは、値ではなくプロパティオブジェクトを返す"

#: ../../../genrst/core_language.rst:116
msgid ""
"class A:\n"
"    @property\n"
"    def p(self):\n"
"        return {\"a\":10}\n"
"\n"
"class AA(A):\n"
"    @property\n"
"    def p(self):\n"
"        return super().p\n"
"\n"
"a = AA()\n"
"print(a.p)"
msgstr ""

#: ../../../genrst/core_language.rst:135
msgid "{'a': 10}"
msgstr ""

#: ../../../genrst/core_language.rst:138
msgid "Functions"
msgstr "関数"

#: ../../../genrst/core_language.rst:143
msgid "Error messages for methods may display unexpected argument counts"
msgstr "メソッドのエラーメッセージは予期しない引数の数を表示する"

#: ../../../genrst/core_language.rst:145
msgid "**Cause:** MicroPython counts \"self\" as an argument."
msgstr "**原因:** MicroPython は引数として \"self\" をカウントしている。"

#: ../../../genrst/core_language.rst:147
msgid ""
"**Workaround:** Interpret error messages with the information above in "
"mind."
msgstr ""
"**回避策:** 上記の情報を念頭に置いてエラーメッセージを解釈してください。"

#: ../../../genrst/core_language.rst:151
msgid ""
"try:\n"
"    [].append()\n"
"except Exception as e:\n"
"    print(e)"
msgstr ""

#: ../../../genrst/core_language.rst:162
msgid "append() takes exactly one argument (0 given)"
msgstr ""

#: ../../../genrst/core_language.rst:167
msgid "User-defined attributes for functions are not supported"
msgstr "関数のユーザ定義属性はサポートされていない"

#: ../../../genrst/core_language.rst:171
msgid "**Workaround:** Use external dictionary, e.g. ``FUNC_X[f] = 0``."
msgstr "**回避策:** 外部辞書を使ってください。たとえば ``FUNC_X[f] = 0`` とするなど。"

#: ../../../genrst/core_language.rst:175
msgid ""
"def f():\n"
"    pass\n"
"\n"
"f.x = 0\n"
"print(f.x)"
msgstr ""

#: ../../../genrst/core_language.rst:190
msgid "Generator"
msgstr "ジェネレータ"

#: ../../../genrst/core_language.rst:195
msgid ""
"Context manager __exit__() not called in a generator which does not run "
"to completion"
msgstr ""
"コンテキストマネージャーの __exit__() は完了まで実行されないジェネレータでは呼び出されない"

#: ../../../genrst/core_language.rst:199
msgid ""
"class foo(object):\n"
"    def __enter__(self):\n"
"        print('Enter')\n"
"    def __exit__(self, *args):\n"
"        print('Exit')\n"
"\n"
"def bar(x):\n"
"    with foo():\n"
"        while True:\n"
"            x += 1\n"
"            yield x\n"
"\n"
"def func():\n"
"    g = bar(0)\n"
"    for _ in range(3):\n"
"        print(next(g))\n"
"\n"
"func()"
msgstr ""

#: ../../../genrst/core_language.rst:224
msgid ""
"Enter\n"
"1\n"
"2\n"
"3\n"
"Exit"
msgstr ""

#: ../../../genrst/core_language.rst:231
msgid "Runtime"
msgstr "ランタイム"

#: ../../../genrst/core_language.rst:236
msgid "Local variables aren't included in locals() result"
msgstr "ローカル変数は locals() の結果に含まれない"

#: ../../../genrst/core_language.rst:238
msgid ""
"**Cause:** MicroPython doesn't maintain symbolic local environment, it is"
" optimized to an array of slots. Thus, local variables can't be accessed "
"by a name."
msgstr ""
"**原因:** MicroPython はシンボリックローカル環境を維持せず、スロットの配列に最適化"
"されています。したがって、ローカル変数には名前でアクセスできません。"

#: ../../../genrst/core_language.rst:242
msgid ""
"def test():\n"
"    val = 2\n"
"    print(locals())\n"
"\n"
"test()"
msgstr ""

#: ../../../genrst/core_language.rst:254
msgid "{'val': 2}"
msgstr ""

#: ../../../genrst/core_language.rst:259
msgid "Code running in eval() function doesn't have access to local variables"
msgstr "eval() 関数で実行されるコードはローカル変数にアクセスできない"

#: ../../../genrst/core_language.rst:261
msgid ""
"**Cause:** MicroPython doesn't maintain symbolic local environment, it is"
" optimized to an array of slots. Thus, local variables can't be accessed "
"by a name. Effectively, ``eval(expr)`` in MicroPython is equivalent to "
"``eval(expr, globals(), globals())``."
msgstr ""
"**原因:** MicroPython はシンボリックローカル環境を維持せず、スロットの配列に最適化"
"されています。したがって、ローカル変数には名前でアクセスできません。"
"効果的に、MicroPython の ``eval(expr)`` は ``eval(expr, globals(), globals())`` "
"と同等です。"

#: ../../../genrst/core_language.rst:265
msgid ""
"val = 1\n"
"\n"
"def test():\n"
"    val = 2\n"
"    print(val)\n"
"    eval(\"print(val)\")\n"
"\n"
"test()"
msgstr ""

#: ../../../genrst/core_language.rst:280
msgid ""
"2\n"
"2"
msgstr ""

#: ../../../genrst/core_language.rst:284
msgid "import"
msgstr ""

#: ../../../genrst/core_language.rst:289
msgid ""
"__path__ attribute of a package has a different type (single string "
"instead of list of strings) in MicroPython"
msgstr ""
"パッケージの __path__ 属性は、MicroPython では異なるデータ型を持つ(文字列の"
"リストではなく、単一の文字列)"

#: ../../../genrst/core_language.rst:291
msgid ""
"**Cause:** MicroPython does't support namespace packages split across "
"filesystem. Beyond that, MicroPython's import system is highly optimized "
"for minimal memory usage."
msgstr ""
"**原因**: MicroPython はファイルシステム間で分割された名前空間パッケージを"
"サポートしていません。それを踏まえ、MicroPython の import システムは、メモリ"
"使用量を最小限に抑えるために高度に最適化されています。"

#: ../../../genrst/core_language.rst:293
msgid ""
"**Workaround:** Details of import handling is inherently implementation "
"dependent. Don't rely on such details in portable applications."
msgstr ""
"**回避策:** import 処理の詳細は、本質的に実装に依存します。ポータブルアプリケーション"
"でこのような詳細に頼らないでください。"

#: ../../../genrst/core_language.rst:297
msgid ""
"import modules\n"
"\n"
"print(modules.__path__)"
msgstr ""

#: ../../../genrst/core_language.rst:307
msgid "['/Users/inachi/work/micropython/tests/cpydiff/modules']"
msgstr ""

#: ../../../genrst/core_language.rst:312
msgid "Failed to load modules are still registered as loaded"
msgstr "モジュールのロードに失敗してもロード済と登録される"

#: ../../../genrst/core_language.rst:314
msgid ""
"**Cause:** To make module handling more efficient, it's not wrapped with "
"exception handling."
msgstr ""
"**原因:** モジュールの処理をより効率的にするために、例外処理でラップされません。"

#: ../../../genrst/core_language.rst:316
msgid ""
"**Workaround:** Test modules before production use; during development, "
"use ``del sys.modules[\"name\"]``, or just soft or hard reset the board."
msgstr ""
"**回避策:** 運用前にモジュールをテストしてください。開発中は ``del sys.modules[\"name\"]`` "
"を使うか、ボードをソフトまたはハードリセットするだけです。"

#: ../../../genrst/core_language.rst:320
msgid ""
"import sys\n"
"\n"
"try:\n"
"    from modules import foo\n"
"except NameError as e:\n"
"    print(e)\n"
"try:\n"
"    from modules import foo\n"
"    print('Should not get here')\n"
"except NameError as e:\n"
"    print(e)"
msgstr ""

#: ../../../genrst/core_language.rst:338
msgid ""
"foo\n"
"name 'xxx' is not defined\n"
"foo\n"
"name 'xxx' is not defined"
msgstr ""

#: ../../../genrst/core_language.rst:346
msgid "MicroPython does't support namespace packages split across filesystem."
msgstr "MicroPythonはファイルシステムで分割された名前空間パッケージをサポートしていない"

#: ../../../genrst/core_language.rst:348
msgid ""
"**Cause:** MicroPython's import system is highly optimized for "
"simplicity, minimal memory usage, and minimal filesystem search overhead."
msgstr ""
"**原因:** MicroPython の import システムは、シンプルさ、最小限のメモリ使用量、"
"最小のファイルシステム検索オーバーヘッドのために高度に最適化されています。"

#: ../../../genrst/core_language.rst:350
msgid ""
"**Workaround:** Don't install modules belonging to the same namespace "
"package in different directories. For MicroPython, it's recommended to "
"have at most 3-component module search paths: for your current "
"application, per-user (writable), system-wide (non-writable)."
msgstr ""
"**回避策:** 異なる名前空間パッケージに属するモジュールを異なるディレクトリに"
"インストールしないでください。MicroPython では、最大３コンポーネントのモジュール"
"検索パスとすることを勧めます。それは、現在のアプリケーション、ユーザごと(書込み可能)、"
"システム全体(書き込み不可)です。"

#: ../../../genrst/core_language.rst:354
msgid ""
"import sys\n"
"sys.path.append(sys.path[1] + \"/modules\")\n"
"sys.path.append(sys.path[1] + \"/modules2\")\n"
"\n"
"import subpkg.foo\n"
"import subpkg.bar\n"
"\n"
"print(\"Two modules of a split namespace package imported\")"
msgstr ""

#: ../../../genrst/core_language.rst:369
msgid "Two modules of a split namespace package imported"
msgstr ""

#: ../../../genrst/index.rst:6
msgid "MicroPython differences from CPython"
msgstr "MicroPythonとCPythonの違い"

#: ../../../genrst/index.rst:8
msgid ""
"The operations listed in this section produce conflicting results in "
"MicroPython when compared to standard Python. "
"MicroPython implements Python 3.4 and some select features of Python 3.5."
msgstr ""
"この章にリストされている操作は、標準の Python と比べると、MicroPython では"
"矛盾する結果となります。"
"MicroPython は Python 3.4 と Pythpn 3.5 の一部の機能を実装しています。"

#: ../../../genrst/modules.rst:4
msgid "Modules"
msgstr "モジュール"

#: ../../../genrst/modules.rst:8
msgid "array"
msgstr ""

#: ../../../genrst/modules.rst:13
msgid "Looking for integer not implemented"
msgstr "整数の探索は未実装"

#: ../../../genrst/modules.rst:17
msgid ""
"import array\n"
"print(1 in array.array('B', b'12'))"
msgstr ""

#: ../../../genrst/modules.rst:26
msgid "False"
msgstr ""

#: ../../../genrst/modules.rst:31
msgid "Array deletion not implemented"
msgstr "配列要素の削除は未実装"

#: ../../../genrst/modules.rst:35
msgid ""
"import array\n"
"a = array.array('b', (1, 2, 3))\n"
"del a[1]\n"
"print(a)"
msgstr ""

#: ../../../genrst/modules.rst:46
msgid "array('b', [1, 3])"
msgstr ""

#: ../../../genrst/modules.rst:55
msgid ""
"import array\n"
"a = array.array('b', (1, 2, 3))\n"
"print(a[3:2:2])"
msgstr ""

#: ../../../genrst/modules.rst:65
msgid "array('b')"
msgstr ""

#: ../../../genrst/modules.rst:68
msgid "builtins"
msgstr ""

#: ../../../genrst/modules.rst:73
msgid "Second argument to next() is not implemented"
msgstr "next() の第２引数は未実装"

#: ../../../genrst/modules.rst:75
msgid "**Cause:** MicroPython is optimised for code space."
msgstr ""

#: ../../../genrst/modules.rst:77
msgid "**Workaround:** Instead of ``val = next(it, deflt)`` use::"
msgstr "**回避策**: ``val = next(it, deflt)`` とする代わりに、次のようにする::"

#: ../../../genrst/modules.rst:79
msgid ""
"try:\n"
"    val = next(it)\n"
"except StopIteration:\n"
"    val = deflt"
msgstr ""

#: ../../../genrst/modules.rst:86
msgid "print(next(iter(range(0)), 42))"
msgstr ""

#: ../../../genrst/modules.rst:94
msgid "42"
msgstr ""

#: ../../../genrst/modules.rst:97
msgid "deque"
msgstr ""

#: ../../../genrst/modules.rst:102
msgid "Deque not implemented"
msgstr "deque は未実装"

#: ../../../genrst/modules.rst:104
msgid ""
"**Workaround:** Use regular lists. micropython-lib has implementation of "
"collections.deque."
msgstr ""
"**回避策:** 通常のリストを使用してください。micropython-lib には collections.deque "
"の実装があります。"

#: ../../../genrst/modules.rst:108
msgid ""
"import collections\n"
"D = collections.deque()\n"
"print(D)"
msgstr ""

#: ../../../genrst/modules.rst:118
msgid "deque([])"
msgstr ""

#: ../../../genrst/modules.rst:121
msgid "json"
msgstr ""

#: ../../../genrst/modules.rst:126
msgid "JSON module does not throw exception when object is not serialisable"
msgstr "json モジュールは、オブジェクトが直列化可能でなくとも例外を発生しない"

#: ../../../genrst/modules.rst:130
msgid ""
"import json\n"
"a = bytes(x for x in range(256))\n"
"try:\n"
"    z = json.dumps(a)\n"
"    x = json.loads(z)\n"
"    print('Should not get here')\n"
"except TypeError:\n"
"    print('TypeError')"
msgstr ""

#: ../../../genrst/modules.rst:145
msgid "TypeError"
msgstr ""

#: ../../../genrst/modules.rst:148
msgid "struct"
msgstr ""

#: ../../../genrst/modules.rst:153
msgid "Struct pack with too few args, not checked by uPy"
msgstr "struct の pack で引数が少なすぎても uPy はチェックしない"

#: ../../../genrst/modules.rst:157
msgid ""
"import struct\n"
"try:\n"
"    print(struct.pack('bb', 1))\n"
"    print('Should not get here')\n"
"except:\n"
"    print('struct.error')"
msgstr ""

#: ../../../genrst/modules.rst:170 ../../../genrst/modules.rst:192
msgid "struct.error"
msgstr ""

#: ../../../genrst/modules.rst:175
msgid "Struct pack with too many args, not checked by uPy"
msgstr "struct の pack で引数が多すぎても uPy はチェックしない"

#: ../../../genrst/modules.rst:179
msgid ""
"import struct\n"
"try:\n"
"    print(struct.pack('bb', 1, 2, 3))\n"
"    print('Should not get here')\n"
"except:\n"
"    print('struct.error')"
msgstr ""

#: ../../../genrst/modules.rst:195
msgid "sys"
msgstr ""

#: ../../../genrst/modules.rst:200
msgid "Overriding sys.stdin, sys.stdout and sys.stderr not possible"
msgstr "sys.stdin, sys.stdout, sys.stderr のオーバーライドは不可能"

#: ../../../genrst/modules.rst:202
msgid "**Cause:** They are stored in read-only memory."
msgstr "**原因:** これらは読取り専用メモリに格納されている。"

#: ../../../genrst/modules.rst:206
msgid ""
"import sys\n"
"sys.stdin = None\n"
"print(sys.stdin)"
msgstr ""

#: ../../../genrst/modules.rst:216
msgid "None"
msgstr ""

#: ../../../genrst/syntax.rst:4
msgid "Syntax"
msgstr "構文"

#: ../../../genrst/syntax.rst:8
msgid "Spaces"
msgstr "スペース"

#: ../../../genrst/syntax.rst:13
msgid "uPy requires spaces between literal numbers and keywords, CPy doesn't"
msgstr "uPy はリテラル数値とキーワードの間にスペースを必要とするが、CPy はそうではない"

#: ../../../genrst/syntax.rst:17
msgid ""
"try:\n"
"    print(eval('1and 0'))\n"
"except SyntaxError:\n"
"    print('Should have worked')\n"
"try:\n"
"    print(eval('1or 0'))\n"
"except SyntaxError:\n"
"    print('Should have worked')\n"
"try:\n"
"    print(eval('1if 1else 0'))\n"
"except SyntaxError:\n"
"    print('Should have worked')"
msgstr ""

#: ../../../genrst/syntax.rst:36
msgid ""
"0\n"
"1\n"
"1"
msgstr ""

#: ../../../genrst/syntax.rst:41
msgid "Unicode"
msgstr ""

#: ../../../genrst/syntax.rst:46
msgid "Unicode name escapes are not implemented"
msgstr "Unicode 名エスケープは未実装"

#: ../../../genrst/syntax.rst:50
msgid "print(\"\\N{LATIN SMALL LETTER A}\")"
msgstr ""

#: ../../../genrst/syntax.rst:58
msgid "a"
msgstr ""

